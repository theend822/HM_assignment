services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: UTC
      PGTZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] 
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  airflow-init:
    image: apache/airflow:latest
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@admin.com --password admin"
    volumes:
      - ./airflow:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__API_AUTH__JWT_SECRET: this_is_a_secret_key
      AIRFLOW__CORE__DEFAULT_TIMEZONE: UTC
      AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: UTC
      TZ: UTC
    depends_on:
      postgres:
        condition: service_healthy
  airflow:
      build: airflow/
      depends_on:
        postgres:
          condition: service_healthy
        airflow-init:
          condition: service_completed_successfully
      ports:
        - "8080:8080"
      volumes:
        - ./airflow:/opt/airflow
        - ./HM_Assignment/raw_data:/opt/airflow/raw_data
        - ./dbt:/opt/dbt
        - ./visualization:/opt/visualization
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
        AIRFLOW__API_AUTH__JWT_SECRET: this_is_a_secret_key
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_HOST: ${POSTGRES_HOST}
        POSTGRES_PORT: ${POSTGRES_PORT}
        AIRFLOW__CORE__DEFAULT_TIMEZONE: UTC
        AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: UTC
        TZ: UTC
      command: airflow api-server
      restart: always
  
  airflow-scheduler:
    build: airflow/
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow:/opt/airflow
      - ./data:/opt/data
      - ./dbt:/opt/dbt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW__API_AUTH__JWT_SECRET: this_is_a_secret_key
      AIRFLOW__CORE__DEFAULT_TIMEZONE: UTC
      AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: UTC
      TZ: UTC
    command: airflow scheduler
    restart: always

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.latest@sha256:a705312b55af0ebdd149977914c28502a382d74dca8fe51fff368371a61cc8a7
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dbt:/opt/dbt
    environment:
      DBT_PROFILES_DIR: /opt/dbt/
      DBT_PROJECT_DIR: /opt/dbt/
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      TZ: UTC
    command: ["tail", "-f", "/dev/null"]
    restart: "no" # dbt should only run when triggered by Airflow

  visualization:
    image: metabase/metabase:latest
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_DBNAME: ${POSTGRES_DB}
      MB_DB_PORT: ${POSTGRES_PORT}
      MB_DB_HOST: ${POSTGRES_HOST}
      TZ: UTC
    volumes:
      - ./visualization:/opt/visualization/metabase
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data: